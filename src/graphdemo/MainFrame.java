package graphdemo;

import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.graph.Graph;
import edu.uci.ics.jung.visualization.DefaultVisualizationModel;
import edu.uci.ics.jung.visualization.VisualizationModel;
import edu.uci.ics.jung.visualization.VisualizationViewer;
import edu.uci.ics.jung.visualization.control.DefaultModalGraphMouse;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

public class MainFrame extends javax.swing.JFrame
{
    public MainFrame()
    {
        initComponents();
        updateExplorationAlgorithmButtonGroup();
        updateGraphTypeButtonGroup();
        updateGraphLayoutButtonGroup();
        updateStatusBar();
    }

    private void updateExplorationAlgorithmButtonGroup()
    {
        switch(SettingsManager.instance().getExplorationAlgorithm())
        {
            default:
            case BFS:
                BFSRadioButtonMenuItem.setSelected(true);
                break;
                
            case DFS:
                DFSRadioButtonMenuItem.setSelected(true);
                break;
                
            case EDGE_BFS:
                edgeBFSRadioButtomMenuItem.setSelected(true);
                break;
                
            case EDGE_DFS:
                edgeDFSRadioButtomMenuItem.setSelected(true);
                break;
        }
    }

    private void updateGraphTypeButtonGroup()
    {
        switch(SettingsManager.instance().getGraphType())
        {
            default:
            case DIRECTED:
                directedRadioButtonMenuItem.setSelected(true);
                break;
                
            case UNDIRECTED:
                undirectedRadioButtonMenuItem.setSelected(true);
                break;
                
            case MIXED:
                mixedRadioButtonMenuItem.setSelected(true);
                break;
        }
    }
    
    private void updateGraphLayoutButtonGroup()
    {
        switch(SettingsManager.instance().getGraphLayout())
        {
            default:
            case CIRCLE:
                circleLayoutRadioButtonMenuItem.setSelected(true);
                break;
                
            case FR:
                frLayoutRadioButtonMenuItem.setSelected(true);
                break;
                
            case ISOM:
                isomLayoutRadioButtonMenuItem.setSelected(true);
                break;
                
            case KK:
                kkLayoutRadioButtonMenuItem.setSelected(true);
                break;
                
            case SPRING:
                springLayoutRadioButtonMenuItem.setSelected(true);
                break;
        }
    }
    
    private void updateStatusBar()
    {
        String message =
            "Graph type: " +
            SettingsManager.instance().getGraphType() +
            ", Graph layout: " +
            SettingsManager.instance().getGraphLayout()+
            ", Weighted graph: " +
            SettingsManager.instance().getGraphIsWeighted() +
            ", Edge probability: " +
            SettingsManager.instance().getGraphEdgeProbability() +
            ", Paralell edges limit: " +
            SettingsManager.instance().getGraphParalellEdgesLimit() +
            ", Number of vertices: " +
            SettingsManager.instance().getGraphNumberOfVertices() +
            ", Exploration algorithm: " +
            SettingsManager.instance().getExplorationAlgorithm() +
            ", Animation delay: " +
            SettingsManager.instance().getAnimationDelayMs() + " ms";
        statusBarLabel.setText(message);
    }
    
    /**
     * This method is called from within the constructor to initialise the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        algorithmTypeButtonGroup = new javax.swing.ButtonGroup();
        graphTypeButtonGroup = new javax.swing.ButtonGroup();
        graphLayoutButtonGroup = new javax.swing.ButtonGroup();
        toolBar = new javax.swing.JToolBar();
        startButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        panel = new javax.swing.JPanel();
        statusBarLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        graphMenu = new javax.swing.JMenu();
        newGraphMenuItem = new javax.swing.JMenuItem();
        settingsMenu = new javax.swing.JMenu();
        graphTypeMenu = new javax.swing.JMenu();
        directedRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        undirectedRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        mixedRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        weightedGraphCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        graphLayoutMenu = new javax.swing.JMenu();
        circleLayoutRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        frLayoutRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        isomLayoutRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        kkLayoutRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        springLayoutRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        numberOfVerticesMenuItem = new javax.swing.JMenuItem();
        edgeProbabilityMenuItem = new javax.swing.JMenuItem();
        paralellEdgesLimitMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        explorationAlgorithmMenu = new javax.swing.JMenu();
        DFSRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        BFSRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        edgeDFSRadioButtomMenuItem = new javax.swing.JRadioButtonMenuItem();
        edgeBFSRadioButtomMenuItem = new javax.swing.JRadioButtonMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        animationDelayMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        resetToDefaultsMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Graph demo");
        setPreferredSize(new java.awt.Dimension(600, 600));

        toolBar.setFloatable(false);
        toolBar.setRollover(true);

        startButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphdemo/resources/start_32_x_32.png"))); // NOI18N
        startButton.setFocusable(false);
        startButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        startButton.setMaximumSize(new java.awt.Dimension(48, 48));
        startButton.setMinimumSize(new java.awt.Dimension(48, 48));
        startButton.setPreferredSize(new java.awt.Dimension(48, 48));
        startButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(startButton);

        pauseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphdemo/resources/pause_32_x_32.png"))); // NOI18N
        pauseButton.setFocusable(false);
        pauseButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pauseButton.setMaximumSize(new java.awt.Dimension(48, 48));
        pauseButton.setMinimumSize(new java.awt.Dimension(48, 48));
        pauseButton.setPreferredSize(new java.awt.Dimension(48, 48));
        pauseButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(pauseButton);

        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphdemo/resources/stop_32_x_32.png"))); // NOI18N
        stopButton.setFocusable(false);
        stopButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stopButton.setMaximumSize(new java.awt.Dimension(48, 48));
        stopButton.setMinimumSize(new java.awt.Dimension(48, 48));
        stopButton.setPreferredSize(new java.awt.Dimension(48, 48));
        stopButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(stopButton);

        panel.setBackground(new java.awt.Color(51, 255, 51));

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 198, Short.MAX_VALUE)
        );

        statusBarLabel.setText("Status bar");
        statusBarLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        graphMenu.setText("Graph");

        newGraphMenuItem.setText("New graph");
        newGraphMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                newGraphMenuItemActionPerformed(evt);
            }
        });
        graphMenu.add(newGraphMenuItem);

        menuBar.add(graphMenu);

        settingsMenu.setText("Settings");
        settingsMenu.setToolTipText("");

        graphTypeMenu.setText("Graph type");

        graphTypeButtonGroup.add(directedRadioButtonMenuItem);
        directedRadioButtonMenuItem.setSelected(true);
        directedRadioButtonMenuItem.setText("Directed");
        directedRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                directedRadioButtonMenuItemActionPerformed(evt);
            }
        });
        graphTypeMenu.add(directedRadioButtonMenuItem);

        graphTypeButtonGroup.add(undirectedRadioButtonMenuItem);
        undirectedRadioButtonMenuItem.setText("Undirected");
        undirectedRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                undirectedRadioButtonMenuItemActionPerformed(evt);
            }
        });
        graphTypeMenu.add(undirectedRadioButtonMenuItem);

        graphTypeButtonGroup.add(mixedRadioButtonMenuItem);
        mixedRadioButtonMenuItem.setText("Mixed");
        mixedRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mixedRadioButtonMenuItemActionPerformed(evt);
            }
        });
        graphTypeMenu.add(mixedRadioButtonMenuItem);
        graphTypeMenu.add(jSeparator3);

        weightedGraphCheckBoxMenuItem.setText("Weighted");
        weightedGraphCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                weightedGraphCheckBoxMenuItemActionPerformed(evt);
            }
        });
        graphTypeMenu.add(weightedGraphCheckBoxMenuItem);

        settingsMenu.add(graphTypeMenu);

        graphLayoutMenu.setText("Graph layout");

        graphLayoutButtonGroup.add(circleLayoutRadioButtonMenuItem);
        circleLayoutRadioButtonMenuItem.setSelected(true);
        circleLayoutRadioButtonMenuItem.setText("Circle");
        circleLayoutRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                circleLayoutRadioButtonMenuItemActionPerformed(evt);
            }
        });
        graphLayoutMenu.add(circleLayoutRadioButtonMenuItem);

        graphLayoutButtonGroup.add(frLayoutRadioButtonMenuItem);
        frLayoutRadioButtonMenuItem.setText("FR");
        frLayoutRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                frLayoutRadioButtonMenuItemActionPerformed(evt);
            }
        });
        graphLayoutMenu.add(frLayoutRadioButtonMenuItem);

        graphLayoutButtonGroup.add(isomLayoutRadioButtonMenuItem);
        isomLayoutRadioButtonMenuItem.setText("ISOM");
        isomLayoutRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                isomLayoutRadioButtonMenuItemActionPerformed(evt);
            }
        });
        graphLayoutMenu.add(isomLayoutRadioButtonMenuItem);

        graphLayoutButtonGroup.add(kkLayoutRadioButtonMenuItem);
        kkLayoutRadioButtonMenuItem.setText("KK");
        kkLayoutRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                kkLayoutRadioButtonMenuItemActionPerformed(evt);
            }
        });
        graphLayoutMenu.add(kkLayoutRadioButtonMenuItem);

        graphLayoutButtonGroup.add(springLayoutRadioButtonMenuItem);
        springLayoutRadioButtonMenuItem.setText("Spring");
        springLayoutRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                springLayoutRadioButtonMenuItemActionPerformed(evt);
            }
        });
        graphLayoutMenu.add(springLayoutRadioButtonMenuItem);

        settingsMenu.add(graphLayoutMenu);

        numberOfVerticesMenuItem.setText("Number of vertices");
        numberOfVerticesMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                numberOfVerticesMenuItemActionPerformed(evt);
            }
        });
        settingsMenu.add(numberOfVerticesMenuItem);

        edgeProbabilityMenuItem.setText("Edge probability");
        edgeProbabilityMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                edgeProbabilityMenuItemActionPerformed(evt);
            }
        });
        settingsMenu.add(edgeProbabilityMenuItem);

        paralellEdgesLimitMenuItem.setText("Paralell edges limit");
        paralellEdgesLimitMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                paralellEdgesLimitMenuItemActionPerformed(evt);
            }
        });
        settingsMenu.add(paralellEdgesLimitMenuItem);
        settingsMenu.add(jSeparator4);

        explorationAlgorithmMenu.setText("Exploration algorithm");

        algorithmTypeButtonGroup.add(DFSRadioButtonMenuItem);
        DFSRadioButtonMenuItem.setSelected(true);
        DFSRadioButtonMenuItem.setText("Depth First Search");
        DFSRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                DFSRadioButtonMenuItemActionPerformed(evt);
            }
        });
        explorationAlgorithmMenu.add(DFSRadioButtonMenuItem);

        algorithmTypeButtonGroup.add(BFSRadioButtonMenuItem);
        BFSRadioButtonMenuItem.setText("Breadth First Search");
        BFSRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                BFSRadioButtonMenuItemActionPerformed(evt);
            }
        });
        explorationAlgorithmMenu.add(BFSRadioButtonMenuItem);

        algorithmTypeButtonGroup.add(edgeDFSRadioButtomMenuItem);
        edgeDFSRadioButtomMenuItem.setText("Edge Depth First Search");
        edgeDFSRadioButtomMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                edgeDFSRadioButtomMenuItemActionPerformed(evt);
            }
        });
        explorationAlgorithmMenu.add(edgeDFSRadioButtomMenuItem);

        algorithmTypeButtonGroup.add(edgeBFSRadioButtomMenuItem);
        edgeBFSRadioButtomMenuItem.setText("Edge Breadth First Search");
        edgeBFSRadioButtomMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                edgeBFSRadioButtomMenuItemActionPerformed(evt);
            }
        });
        explorationAlgorithmMenu.add(edgeBFSRadioButtomMenuItem);

        settingsMenu.add(explorationAlgorithmMenu);
        settingsMenu.add(jSeparator1);

        animationDelayMenuItem.setText("Animation delay");
        animationDelayMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                animationDelayMenuItemActionPerformed(evt);
            }
        });
        settingsMenu.add(animationDelayMenuItem);
        settingsMenu.add(jSeparator2);

        resetToDefaultsMenuItem.setText("Reset to defaults");
        resetToDefaultsMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                resetToDefaultsMenuItemActionPerformed(evt);
            }
        });
        settingsMenu.add(resetToDefaultsMenuItem);

        menuBar.add(settingsMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(statusBarLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(statusBarLabel))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DFSRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_DFSRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_DFSRadioButtonMenuItemActionPerformed
        SettingsManager.instance().setExplorationAlgorithm(ExplorationAlgorithm.DFS);
        updateStatusBar();
    }//GEN-LAST:event_DFSRadioButtonMenuItemActionPerformed

    private void BFSRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BFSRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_BFSRadioButtonMenuItemActionPerformed
        SettingsManager.instance().setExplorationAlgorithm(ExplorationAlgorithm.BFS);
        updateStatusBar();
    }//GEN-LAST:event_BFSRadioButtonMenuItemActionPerformed

    private void edgeDFSRadioButtomMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_edgeDFSRadioButtomMenuItemActionPerformed
    {//GEN-HEADEREND:event_edgeDFSRadioButtomMenuItemActionPerformed
        SettingsManager.instance().setExplorationAlgorithm(ExplorationAlgorithm.EDGE_DFS);
        updateStatusBar();
    }//GEN-LAST:event_edgeDFSRadioButtomMenuItemActionPerformed

    private void edgeBFSRadioButtomMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_edgeBFSRadioButtomMenuItemActionPerformed
    {//GEN-HEADEREND:event_edgeBFSRadioButtomMenuItemActionPerformed
        SettingsManager.instance().setExplorationAlgorithm(ExplorationAlgorithm.EDGE_BFS);
        updateStatusBar();
    }//GEN-LAST:event_edgeBFSRadioButtomMenuItemActionPerformed

    private void resetToDefaultsMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetToDefaultsMenuItemActionPerformed
    {//GEN-HEADEREND:event_resetToDefaultsMenuItemActionPerformed
        SettingsManager.instance().resetAll();
        updateExplorationAlgorithmButtonGroup();
        updateGraphTypeButtonGroup();
        updateGraphLayoutButtonGroup();
        updateStatusBar();
    }//GEN-LAST:event_resetToDefaultsMenuItemActionPerformed

    private void animationDelayMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_animationDelayMenuItemActionPerformed
    {//GEN-HEADEREND:event_animationDelayMenuItemActionPerformed
        String result = (String)JOptionPane.showInputDialog(
            this,
            "Please enter a value in range: " +
                SettingsManager.MIN_ANIMATION_DELAY_MS + "-" +
                SettingsManager.MAX_ANIMATION_DELAY_MS,
            "Set animation delay in milliseconds",
            JOptionPane.INFORMATION_MESSAGE,
            null,
            null,
            SettingsManager.instance().getAnimationDelayMs());
        // Null means Cancel has been pressed
        if (result != null)
        {
            try
            {
                SettingsManager.instance().setAnimationDelayMs(Integer.parseInt(result));
            }
            catch (NumberFormatException ex)
            {
                JOptionPane.showMessageDialog(
                    null,
                    "\"" + result + "\"" + " is not a valid delay value." +
                    " Using default value of " +
                    SettingsManager.DEFAULT_ANIMATION_DELAY_MS + " instead.",
                    "Invalid value.",
                    JOptionPane.ERROR_MESSAGE); 
                SettingsManager.instance().setAnimationDelayMs(SettingsManager.DEFAULT_ANIMATION_DELAY_MS);
            }
        }
        updateStatusBar();
    }//GEN-LAST:event_animationDelayMenuItemActionPerformed

    private void newGraphMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newGraphMenuItemActionPerformed
    {//GEN-HEADEREND:event_newGraphMenuItemActionPerformed

        Graph<Vertex, Edge> graph = GraphGenerator.newGraph();
        final Layout<Vertex, Edge> layout = GraphLayoutFactory.instance().newLayout(graph);
        layout.setSize(panel.getSize());
        final VisualizationModel<Vertex, Edge> model = new DefaultVisualizationModel<>(layout);
        final VisualizationViewer<Vertex, Edge> vv = new VisualizationViewer<>(model);
        final DefaultModalGraphMouse<Vertex, Edge> graphMouse = new DefaultModalGraphMouse<>();
        vv.setGraphMouse(graphMouse);
        vv.setSize(panel.getSize());
        vv.setBackground(Color.blue);
        panel.removeAll();
        panel.setLayout(new BorderLayout());
        panel.add(vv);
        panel.addComponentListener(new ComponentListener()
        {
            @Override
            public void componentResized(ComponentEvent ce)
            {
                layout.setSize(panel.getSize());
                // TODO use one of these, not sure which, check with various layouts
                //layout.reset();
                layout.initialize();
                vv.setSize(panel.getSize());
            }
            @Override public void componentMoved(ComponentEvent ce) {}
            @Override public void componentShown(ComponentEvent ce) {}
            @Override public void componentHidden(ComponentEvent ce) {}
        });
    }//GEN-LAST:event_newGraphMenuItemActionPerformed

    private void circleLayoutRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_circleLayoutRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_circleLayoutRadioButtonMenuItemActionPerformed
        SettingsManager.instance().setGraphLayout(GraphLayout.CIRCLE);
        updateStatusBar();
    }//GEN-LAST:event_circleLayoutRadioButtonMenuItemActionPerformed

    private void frLayoutRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_frLayoutRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_frLayoutRadioButtonMenuItemActionPerformed
        SettingsManager.instance().setGraphLayout(GraphLayout.FR);
        updateStatusBar();
    }//GEN-LAST:event_frLayoutRadioButtonMenuItemActionPerformed

    private void isomLayoutRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_isomLayoutRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_isomLayoutRadioButtonMenuItemActionPerformed
        SettingsManager.instance().setGraphLayout(GraphLayout.ISOM);
        updateStatusBar();
    }//GEN-LAST:event_isomLayoutRadioButtonMenuItemActionPerformed

    private void kkLayoutRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_kkLayoutRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_kkLayoutRadioButtonMenuItemActionPerformed
        SettingsManager.instance().setGraphLayout(GraphLayout.KK);
        updateStatusBar();
    }//GEN-LAST:event_kkLayoutRadioButtonMenuItemActionPerformed

    private void springLayoutRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_springLayoutRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_springLayoutRadioButtonMenuItemActionPerformed
        SettingsManager.instance().setGraphLayout(GraphLayout.SPRING);
        updateStatusBar();
    }//GEN-LAST:event_springLayoutRadioButtonMenuItemActionPerformed

    private void directedRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_directedRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_directedRadioButtonMenuItemActionPerformed
        SettingsManager.instance().setGraphType(GraphType.DIRECTED);
        updateStatusBar();
    }//GEN-LAST:event_directedRadioButtonMenuItemActionPerformed

    private void undirectedRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_undirectedRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_undirectedRadioButtonMenuItemActionPerformed
        SettingsManager.instance().setGraphType(GraphType.UNDIRECTED);
        updateStatusBar();
    }//GEN-LAST:event_undirectedRadioButtonMenuItemActionPerformed

    private void mixedRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mixedRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_mixedRadioButtonMenuItemActionPerformed
        SettingsManager.instance().setGraphType(GraphType.MIXED);
        updateStatusBar();
    }//GEN-LAST:event_mixedRadioButtonMenuItemActionPerformed

    private void weightedGraphCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_weightedGraphCheckBoxMenuItemActionPerformed
    {//GEN-HEADEREND:event_weightedGraphCheckBoxMenuItemActionPerformed
        SettingsManager.instance().setGraphIsWeighted(weightedGraphCheckBoxMenuItem.isSelected());
        updateStatusBar();
    }//GEN-LAST:event_weightedGraphCheckBoxMenuItemActionPerformed

    private void edgeProbabilityMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_edgeProbabilityMenuItemActionPerformed
    {//GEN-HEADEREND:event_edgeProbabilityMenuItemActionPerformed
        String result = (String)JOptionPane.showInputDialog(
            this,
            "Please enter a value in range: " +
                SettingsManager.MIN_GRAPH_EDGE_PROBABILITY + "-" +
                SettingsManager.MAX_GRAPH_EDGE_PROBABILITY,
            "Set edge probability",
            JOptionPane.INFORMATION_MESSAGE,
            null,
            null,
            SettingsManager.instance().getGraphEdgeProbability());
        // Null means Cancel has been pressed
        if (result != null)
        {
            try
            {
                SettingsManager.instance().setGraphEdgeProbability(Double.parseDouble(result));
            }
            catch (NumberFormatException ex)
            {
                JOptionPane.showMessageDialog(
                    null,
                    "\"" + result + "\"" + " is not a valid probability value." +
                    " Using default value of " +
                    SettingsManager.DEFAULT_GRAPH_EDGE_PROBABILITY + " instead.",
                    "Invalid value.",
                    JOptionPane.ERROR_MESSAGE); 
                SettingsManager.instance().setGraphEdgeProbability(SettingsManager.DEFAULT_GRAPH_EDGE_PROBABILITY);
            }
        }
        updateStatusBar();
    }//GEN-LAST:event_edgeProbabilityMenuItemActionPerformed

    private void numberOfVerticesMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_numberOfVerticesMenuItemActionPerformed
    {//GEN-HEADEREND:event_numberOfVerticesMenuItemActionPerformed
        String result = (String)JOptionPane.showInputDialog(
            this,
            "Please enter a value in range: " +
                SettingsManager.MIN_GRAPH_NUMBER_OF_VERTICES + "-" +
                SettingsManager.MAX_GRAPH_NUMBER_OF_VERTICES,
            "Set number of vertices",
            JOptionPane.INFORMATION_MESSAGE,
            null,
            null,
            SettingsManager.instance().getGraphNumberOfVertices());
        // Null means Cancel has been pressed
        if (result != null)
        {
            try
            {
                SettingsManager.instance().setGraphNumberOfVertices(Integer.parseInt(result));
            }
            catch (NumberFormatException ex)
            {
                JOptionPane.showMessageDialog(
                    null,
                    "\"" + result + "\"" + " is not a valid number of vertices." +
                    " Using default value of " +
                    SettingsManager.DEFAULT_GRAPH_NUMBER_OF_VERTICES + " instead.",
                    "Invalid value.",
                    JOptionPane.ERROR_MESSAGE); 
                SettingsManager.instance().setGraphNumberOfVertices(SettingsManager.DEFAULT_GRAPH_NUMBER_OF_VERTICES);
            }
        }
        updateStatusBar();
    }//GEN-LAST:event_numberOfVerticesMenuItemActionPerformed

    private void paralellEdgesLimitMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_paralellEdgesLimitMenuItemActionPerformed
    {//GEN-HEADEREND:event_paralellEdgesLimitMenuItemActionPerformed
        String result = (String)JOptionPane.showInputDialog(
            this,
            "Please enter a value in range: " +
                SettingsManager.MIN_GRAPH_PARALELL_EDGES_LIMIT + "-" +
                SettingsManager.MAX_GRAPH_PARALELL_EDGES_LIMIT,
            "Set the maximum number of paralell edges",
            JOptionPane.INFORMATION_MESSAGE,
            null,
            null,
            SettingsManager.instance().getGraphParalellEdgesLimit());
        // Null means Cancel has been pressed
        if (result != null)
        {
            try
            {
                SettingsManager.instance().setGraphParalellEdgesLimit(Integer.parseInt(result));
            }
            catch (NumberFormatException ex)
            {
                JOptionPane.showMessageDialog(
                    null,
                    "\"" + result + "\"" + " is not a valid paralell edges limit." +
                    " Using default value of " +
                    SettingsManager.DEFAULT_GRAPH_PARALELL_EDGES_LIMIT + " instead.",
                    "Invalid value.",
                    JOptionPane.ERROR_MESSAGE); 
                SettingsManager.instance().setGraphParalellEdgesLimit(
                    SettingsManager.DEFAULT_GRAPH_PARALELL_EDGES_LIMIT);
            }
        }
        updateStatusBar();
    }//GEN-LAST:event_paralellEdgesLimitMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        try
        {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
        catch (ClassNotFoundException | InstantiationException |
            IllegalAccessException | UnsupportedLookAndFeelException ex)
        {
            // TODO
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButtonMenuItem BFSRadioButtonMenuItem;
    private javax.swing.JRadioButtonMenuItem DFSRadioButtonMenuItem;
    private javax.swing.ButtonGroup algorithmTypeButtonGroup;
    private javax.swing.JMenuItem animationDelayMenuItem;
    private javax.swing.JRadioButtonMenuItem circleLayoutRadioButtonMenuItem;
    private javax.swing.JRadioButtonMenuItem directedRadioButtonMenuItem;
    private javax.swing.JRadioButtonMenuItem edgeBFSRadioButtomMenuItem;
    private javax.swing.JRadioButtonMenuItem edgeDFSRadioButtomMenuItem;
    private javax.swing.JMenuItem edgeProbabilityMenuItem;
    private javax.swing.JMenu explorationAlgorithmMenu;
    private javax.swing.JRadioButtonMenuItem frLayoutRadioButtonMenuItem;
    private javax.swing.ButtonGroup graphLayoutButtonGroup;
    private javax.swing.JMenu graphLayoutMenu;
    private javax.swing.JMenu graphMenu;
    private javax.swing.ButtonGroup graphTypeButtonGroup;
    private javax.swing.JMenu graphTypeMenu;
    private javax.swing.JRadioButtonMenuItem isomLayoutRadioButtonMenuItem;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JRadioButtonMenuItem kkLayoutRadioButtonMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JRadioButtonMenuItem mixedRadioButtonMenuItem;
    private javax.swing.JMenuItem newGraphMenuItem;
    private javax.swing.JMenuItem numberOfVerticesMenuItem;
    private javax.swing.JPanel panel;
    private javax.swing.JMenuItem paralellEdgesLimitMenuItem;
    private javax.swing.JButton pauseButton;
    private javax.swing.JMenuItem resetToDefaultsMenuItem;
    private javax.swing.JMenu settingsMenu;
    private javax.swing.JRadioButtonMenuItem springLayoutRadioButtonMenuItem;
    private javax.swing.JButton startButton;
    private javax.swing.JLabel statusBarLabel;
    private javax.swing.JButton stopButton;
    private javax.swing.JToolBar toolBar;
    private javax.swing.JRadioButtonMenuItem undirectedRadioButtonMenuItem;
    private javax.swing.JCheckBoxMenuItem weightedGraphCheckBoxMenuItem;
    // End of variables declaration//GEN-END:variables
}
